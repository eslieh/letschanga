from flask_restful import Resource, reqparse
from flask_jwt_extended import jwt_required, get_jwt_identity
from flask import request, current_app
from models import db
from models.donation import Donation
from models.fundraiser import Fundraiser
import base64
import requests
import os

class Donate_resource(Resource):
    def post(self):
        data =  request.get_json()
        
        fundraiser_id = data.get('fundraiser_id') 
        message = data.get('message') 
        amount = data.get('amount') 
        donor_name = data.get('donor_name') 
        mpesa_number = data.get('mpesa_number')
        fundraiser = Fundraiser.query.filter_by(fundraiser_id=fundraiser_id).first()
        if not fundraiser:    
            return {"error":"no fundraiser found"}, 403    
        
        
        
        consumer_key = os.getenv('SANDBOX_BUNI_CONSUMER_KEY')
        consumer_secret = os.getenv('SANDBOX_BUNI_CONSUMER_SECRET')
        
        # Encode credentials
        credentials = f"{consumer_key}:{consumer_secret}"
        encoded_credentials = base64.b64encode(credentials.encode()).decode()

        # Token URL
        token_url = "https://uat.buni.kcbgroup.com/token?grant_type=client_credentials"

        # Get access token
        token_headers = {
            "Authorization": f"Basic {encoded_credentials}",
            "Content-Type": "application/x-www-form-urlencoded"
        }

        token_response = requests.post(token_url, headers=token_headers)

        if token_response.status_code == 200:
            access_token = token_response.json()['access_token']
            print("Access token received")
        else:
            print("Failed to get token:", token_response.text)
            exit()

        # Step 2: Send STK Push
        url = "https://uat.buni.kcbgroup.com/mm/api/request/1.0.0"

        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }
        def normalize_mpesa_number(mpesa_number):
            mpesa_number = str(mpesa_number).strip()

            # Remove '+' if present
            if mpesa_number.startswith('+'):
                mpesa_number = mpesa_number[1:]

            # If number starts with 0, replace with 254
            if mpesa_number.startswith('0'):
                mpesa_number = '254' + mpesa_number[1:]

            # If number starts with 7 or 1, assume it's missing 254
            if mpesa_number.startswith(('7', '1')) and len(mpesa_number) == 9:
                mpesa_number = '254' + mpesa_number

            # Validate final length
            if not mpesa_number.startswith('254') or len(mpesa_number) != 12:
                raise ValueError("Invalid Mpesa number format.")

            return mpesa_number
        callback_url = "https://bgrtfdl5-5000.uks1.devtunnels.ms/api/callback/mpesa/donation"
        normalize_number = normalize_mpesa_number(mpesa_number) 
        payload = {
            "phoneNumber": normalize_number,
            "amount": amount,
            "invoiceNumber": f"KCBTILLNO-INV{fundraiser_id}_{donor_name}",
            "sharedShortCode": False,
            "orgShortCode": "",
            "orgPassKey": "",
            "callbackUrl": callback_url,
            "transactionDescription": "Donation"
        }

        response = requests.post(url, json=payload, headers=headers)

        if response.status_code == 200:
            donation = Donation(amount=amount, message=message, donor_name=donor_name, fundraiser_id=fundraiser_id)
        
            db.session.add(donation)
            db.session.commit
            print("STK Push initiated successfully:")
            print(response.json())
            return{"success":"initiated successfully", "data": response.json}
        else:
            print("Error initiating STK Push:", response.status_code, response.text)
            return {"error": f"Error initiating STK Push: {response.status_code}, {response.text}"}, 400

class Donatio_callBack(Resource):
    def post(self):
        data = request.get_json()
        
        # Print entire payload for debugging/logging
        print("Callback Received:")
        print(data)

        try:
            result = data['Body']['stkCallback']
            merchant_request_id = result.get('MerchantRequestID')
            checkout_request_id = result.get('CheckoutRequestID')
            result_code = result.get('ResultCode')
            result_desc = result.get('ResultDesc')

            metadata_items = result.get('CallbackMetadata', {}).get('Item', [])
            parsed_metadata = {item['Name']: item.get('Value') for item in metadata_items}

            # Example: Print parsed values
            print("MerchantRequestID:", merchant_request_id)
            print("CheckoutRequestID:", checkout_request_id)
            print("ResultCode:", result_code)
            print("ResultDesc:", result_desc)
            print("Metadata:", parsed_metadata)

            # Here you could store the data in your DB if needed

            return {"message": "Callback received successfully"}, 200

        except Exception as e:
            print("Error processing callback:", str(e))
            return {"message": "Invalid callback payload"}, 400